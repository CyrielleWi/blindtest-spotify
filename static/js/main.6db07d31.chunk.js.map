{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","onClick","children","getRandomNumber","x","Math","floor","random","AlbumCover","src","this","track","album","images","url","style","width","height","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timeout","state","songsLoaded","musicData","musicNumber","currentTrack","console","log","answerId","id","swal","then","newTrack","clearTimeout","randomTrack1","randomTrack2","_this2","setTimeout","newCurrentTrack","setState","_this3","fetch","method","headers","Authorization","response","json","data","randomNumber","items","length","_this4","className","loading","alt","musics","chooseTracks","array","counter","index","temp","shuffleArray","logo","App_AlbumCover","lib_default","preview_url","playStatus","Sound","status","PLAYING","map","item","src_Button_0","checkAnswer","name","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6db07d31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\n\nconst apiToken = 'BQDJxSVPMOz3ZOZStsUh5eZb8pFD6J6HffuhK9T4cLf957_eKM9O9rI5N5lXPsjv9lZKSBYtoaIx408qzGFZeW7wp_y1wfABPNDWu2aHTkbxrX8VtTfe5IGRD_qmx5Eb_eubCHsWA5RktRGLH992aEtRwmPS';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nclass AlbumCover extends Component {\n  render() {\n    const src = this.props.track.album.images[0].url;\n    return (<img src={src} style={{ width: 400, height: 400 }} />);\n  }\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.timeout = null;\n    this.state = {\n      songsLoaded: false,\n      musicData: null,\n      musicNumber: 0,\n      currentTrack: null,\n    };\n    console.log(\"Constructor\");\n  }\n\n  checkAnswer(answerId) {\n    if (answerId == this.state.currentTrack.id) {\n      swal('Bravo', \"Bien ouej c'est la bonne musique!!\", 'success')\n        .then(this.newTrack())\n        .then(clearTimeout(this.timeout))\n\n    }\n    else {\n      swal(\"C'est faux\", \"Quel échec\", 'error')\n        .then(this.newTrack())\n    }\n  }\n\n  chooseTracks() {\n    let randomTrack1 = this.state.musicData[getRandomNumber(this.state.musicNumber)].track;\n    let randomTrack2 = this.state.musicData[getRandomNumber(this.state.musicNumber)].track;\n\n    while (randomTrack1.id === this.state.currentTrack.id || randomTrack1.id === randomTrack2.id || randomTrack2.id === this.state.currentTrack.id) {\n      randomTrack1 = this.state.musicData[getRandomNumber(this.state.musicNumber)].track;\n      randomTrack2 = this.state.musicData[getRandomNumber(this.state.musicNumber)].track;\n    }\n    \n    return [this.state.currentTrack, randomTrack1, randomTrack2];\n  }\n\n  newTrack() {\n    this.timeout = setTimeout(() => {this.newTrack()}, 30000);\n\n    let newCurrentTrack = this.state.musicData[getRandomNumber(this.state.musicNumber)].track;\n    \n    this.setState({\n      currentTrack: newCurrentTrack\n    })\n\n  }\n\n  componentDidMount() {\n      fetch('https://api.spotify.com/v1/me/tracks', {\n        method: 'GET',\n        headers: {\n         Authorization: 'Bearer ' + apiToken,\n        },\n      })\n        .then(response => response.json())\n        .then((data) => {\n          console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\n          const randomNumber = getRandomNumber(data.items.length);\n          this.setState({\n            musicData: data.items,\n            songsLoaded: true,\n            musicNumber: data.items.length,\n            currentTrack: data.items[randomNumber].track\n        })\n        this.timeout = setTimeout(() => {this.newTrack()}, 30000);\n        console.log(\"Timeout is set\");\n      })  \n\n  }  \n\n  render() {\n      if (this.state.songsLoaded === false) {\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src={loading} className=\"App-loading\" alt=\"loading\"/>\n            </header>\n          </div>\n        );\n      }\n\n      else {\n\n        let track1;\n        let track2;\n        let track3;\n\n        let musics = this.chooseTracks();\n        musics = shuffleArray(musics);\n\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n              <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n            </header>\n            <div className=\"App-images\">\n              <AlbumCover track={this.state.currentTrack}/>\n            </div>\n            <Sound url={this.state.currentTrack.preview_url} playStatus={Sound.status.PLAYING}/>\n            <div className=\"App-buttons\"> \n              {musics.map(item => \n                <Button onClick={() => this.checkAnswer(item.id)}>{item.name}</Button>\n              )}\n            </div>\n          </div>\n      );\n      }\n\n\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}